[gd_scene load_steps=5 format=2]

[ext_resource path="res://assets/sprites/environments/hex.png" type="Texture" id=1]
[ext_resource path="res://combat/levels/test/shader_grid.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const float scale = 1000.0;
uniform vec2 p1;
uniform vec2 p2;
uniform float stroke;

float distance_from_segment(vec2 v, vec2 w, vec2 p){
	float l = distance(v, w);
	if (l <= 0.01)
		return distance(p, v);   // v == w case
		
	// Consider the line extending the segment, parameterized as v + t (w - v).
	// We find projection of point p onto the line.
	// It falls where t = [(p-v) . (w-v)] / |w-v|^2
	// We clamp t from [0,1] to handle points outside the segment vw.
	float t = clamp(dot(p - v, w - v) / (l*l), 0, 1);
	vec2 projection = v + t * (w - v);  // Projection falls on the segment
	return distance(p, projection);
}

vec2 create_point(vec2 position, int row, int col, int W, int H, float cell_size, float t, float amplitude){
	return position + vec2((float(col)-float(W-1)/2.0)*cell_size + amplitude*sin(float(col+row)+t), (float(row)-float(H-1)/2.0)*cell_size + amplitude*cos(float(col+row)+t));
}

void fragment(){
	const vec2 position = vec2(500.0, 500.0);
	const float cell_size = 40.0; 
	const int W = 25;
	const int H = 25;
	const float amplitude = 20.0;
	
	// Tile the space
	vec2 uv = UV*scale/cell_size;
    ivec2 i_uv = ivec2(floor(uv));
    vec2 f_uv = fract(uv);
	
	float f = 1.0;
	
	for (int col = max(i_uv.x-1, 0); col <= min(i_uv.x+1, W-1); col++) {
		for (int row = max(i_uv.y-1, 0); row <= min(i_uv.y+1, H-1); row++) {
			vec2 p1n = create_point(position, row, col, W, H, cell_size, TIME, amplitude)/scale;
			if(col < W-1) {
				// horizontal
				vec2 p2n = create_point(position, row, col+1, W, H, cell_size, TIME, amplitude)/scale;
				f = min(f, distance_from_segment(p1n, p2n, UV));
			}
			if(row < H-1) {
				// vertical
				vec2 p2n = create_point(position, row+1, col, W, H, cell_size, TIME, amplitude)/scale;
				f = min(f, distance_from_segment(p1n, p2n, UV));
			}
		}
	}
	
	//COLOR = vec4(vec3( 1.0-step(stroke/2.0/scale, f) ), 1.0);
	COLOR = vec4(0.0, 0.25*step(0.95, max(f_uv.x,f_uv.y)), 0.0, 1.0) + vec4(vec3( 1.0-step(stroke/2.0/scale, f)), 0.0);
}"
custom_defines = ""

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/p1 = Vector2( 250, 250 )
shader_param/p2 = Vector2( 750, 750 )
shader_param/stroke = 1.0

[node name="Node2D" type="Node2D"]
script = ExtResource( 2 )

[node name="hex" type="Sprite" parent="."]
material = SubResource( 2 )
scale = Vector2( 4.11876, 4.73169 )
texture = ExtResource( 1 )
centered = false
